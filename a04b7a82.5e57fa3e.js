(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{111:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),u=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},b=function(e){var t=u(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),b=u(n),m=a,d=b["".concat(o,".").concat(m)]||b[m]||p[m]||i;return n?r.a.createElement(d,l(l({ref:t},c),{},{components:n})):r.a.createElement(d,l({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},127:function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var a=n(0);const r=()=>a.createElement("span",{className:"webshell"},"webshell")},94:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return b}));var a=n(2),r=n(6),i=(n(0),n(111)),o=n(127),l={title:"The Future of Webshell (v3+)",author:"Jules Sam. Randolph",author_title:"Freelance React developer",author_url:"https://github.com/jsamr",author_image_url:"https://avatars1.githubusercontent.com/u/3646758?s=460&u=f699d25514156aa9b975837a52daf135449e43d8&v=4",tags:["webshell","react native","future"]},s={permalink:"/webshell/blog/2020/09/17/the-future-of-webshell",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/blog/blog/2020-09-17-the-future-of-webshell.mdx",source:"@site/blog/2020-09-17-the-future-of-webshell.mdx",description:"This post will be regularly updated to track the main features scheduled for .",date:"2020-09-17T00:00:00.000Z",tags:[{label:"webshell",permalink:"/webshell/blog/tags/webshell"},{label:"react native",permalink:"/webshell/blog/tags/react-native"},{label:"future",permalink:"/webshell/blog/tags/future"}],title:"The Future of Webshell (v3+)",readingTime:2.955,truncated:!1},c=[{value:"Native to Web Communication",id:"native-to-web-communication",children:[{value:"Native Usage",id:"native-usage",children:[]},{value:"Native Implementation",id:"native-implementation",children:[]},{value:"Web Implementation",id:"web-implementation",children:[]}]},{value:"Asynchronous Web to Native Communication",id:"asynchronous-web-to-native-communication",children:[{value:"Native Usage",id:"native-usage-1",children:[]},{value:"Native Implementation",id:"native-implementation-1",children:[]},{value:"Web Implementation",id:"web-implementation-1",children:[]}]},{value:"Asynchronous Native to Web Communication",id:"asynchronous-native-to-web-communication",children:[{value:"Native Usage",id:"native-usage-2",children:[]},{value:"Native Implementation",id:"native-implementation-2",children:[]},{value:"Web Implementation",id:"web-implementation-2",children:[]}]},{value:"Feature Cardinality",id:"feature-cardinality",children:[]},{value:"Passing Props to Feature Scripts",id:"passing-props-to-feature-scripts",children:[{value:"Native Usage",id:"native-usage-3",children:[]},{value:"Native Implementation",id:"native-implementation-3",children:[]},{value:"Web Implementation",id:"web-implementation-3",children:[]}]}],u={rightToc:c};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"This post will be regularly updated to track the main features scheduled for ",Object(i.b)(o.a,{mdxType:"Webshell"}),"."),Object(i.b)("h2",{id:"native-to-web-communication"},"Native to Web Communication"),Object(i.b)("p",null,"Currently, features can inject scripts which will create events, and offer props to handle those events.\nWhat we'd like to provide is a way to communicate imperatively ",Object(i.b)("em",{parentName:"p"},"from")," the shell ",Object(i.b)("em",{parentName:"p"},"to")," the Web. Something like this:"),Object(i.b)("h3",{id:"native-usage"},"Native Usage"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx",metastring:'title="MyComponent.jsx"',title:'"MyComponent.jsx"'}),"import * as React from 'react';\nimport { makeWebshell } from '@formidable-webview/webshell';\nimport { Feature1 } from './Feature1';\n\nconst feature1 = new Feature1();\nconst Webshell = makeWebshell(WebView, feature1);\n\nexport const MyComponent = (props) => {\n  const webHandle = React.useRef();\n  React.useEffect(() => {\n    // props.user must be JSON-serializable\n    webHandle.postMessageToWeb(feature1, 'user', props.user);\n  }, [props.user]);\n  return <Webshell webHandle={webHandle} />;\n};\n")),Object(i.b)("h3",{id:"native-implementation"},"Native Implementation"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:'title="Feature1.js"',title:'"Feature1.js"'}),"import { FeatureBuilder } from '@formidable-webview/webshell';\nimport script from './Feature1.webjs';\n\nexport const Feature1 = new FeatureBuilder({\n  script,\n  defaultOptions: {},\n  featureIdentifier: 'org.myorg/webshell.feature1',\n  className: 'Feature1'\n})\n  .withWebHandler('user')\n  .build();\n")),Object(i.b)("h3",{id:"web-implementation"},"Web Implementation"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:'title="Feature1.webjs"',title:'"Feature1.webjs"'}),"function Feature1(context) {\n  context.onShellMessage('user', function (user) {\n    console.info(user); // Prints user!\n  });\n}\n")),Object(i.b)("h2",{id:"asynchronous-web-to-native-communication"},"Asynchronous Web to Native Communication"),Object(i.b)("h3",{id:"native-usage-1"},"Native Usage"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx",metastring:'title="MyComponent.jsx"',title:'"MyComponent.jsx"'}),"import * as React from 'react';\nimport { makeWebshell } from '@formidable-webview/webshell';\nimport { AsyncFlatteryFeature } from './AsyncFlatteryFeature';\n\nconst flatters = new AsyncFlatteryFeature();\nconst Webshell = makeWebshell(WebView, flatters);\n\n// This function must return a promise!\nfunction handleAsyncFlattery() {\n  return Promise.resolve('I love you too!');\n}\n\nexport const MyComponent = (props) => {\n  return <Webshell onAsyncWebFlattery={handleFlattery} />;\n};\n")),Object(i.b)("h3",{id:"native-implementation-1"},"Native Implementation"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:'title="AsyncFlatteryFeature.js"',title:'"AsyncFlatteryFeature.js"'}),"import { FeatureBuilder } from '@formidable-webview/webshell';\nimport script from './AsyncFlatteryFeature.webjs';\n\nexport const AsyncFlatteryFeature = new FeatureBuilder({\n  script,\n  defaultOptions: {},\n  featureIdentifier: 'org.myorg/webshell.async-flattery',\n  className: 'AsyncFlatteryFeature'\n})\n  .withAsyncHandlerProp('onAsyncWebFlattery', 'flatters')\n  .build();\n")),Object(i.b)("h3",{id:"web-implementation-1"},"Web Implementation"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:'title="AsyncFlatteryFeature.webjs"',title:'"AsyncFlatteryFeature.webjs"'}),"function AsyncFlatteryFeature(context) {\n  context\n    .postAsyncMessageToShell('flatters', 'I really like you.')\n    .then(function (response) {\n      console.info(response);\n      // 'I love you too!'\n    });\n}\n")),Object(i.b)("h2",{id:"asynchronous-native-to-web-communication"},"Asynchronous Native to Web Communication"),Object(i.b)("h3",{id:"native-usage-2"},"Native Usage"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx",metastring:'title="MyComponent.jsx"',title:'"MyComponent.jsx"'}),"import * as React from 'react';\nimport { makeWebshell } from '@formidable-webview/webshell';\nimport { AsyncFlatteryFeature } from './AsyncFlatteryFeature';\n\nconst flatteryFeature = new AsyncFlatteryFeature();\nconst Webshell = makeWebshell(WebView, flatteryFeature);\n\nexport const MyComponent = (props) => {\n  const webHandle = React.useRef();\n  React.useEffect(() => {\n    // props.user must be JSON-serializable\n    webHandle\n      .postAsyncMessageToWeb(flatteryFeature, 'flatters', 'I really like you!')\n      .then(response => console.info(response));\n  }, []);\n  return <Webshell webHandle={webHandle} />;\n};\n")),Object(i.b)("h3",{id:"native-implementation-2"},"Native Implementation"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:'title="AsyncFlatteryFeature.js"',title:'"AsyncFlatteryFeature.js"'}),"import { FeatureBuilder } from '@formidable-webview/webshell';\nimport script from './AsyncFlatteryFeature.webjs';\n\nexport const AsyncFlatteryFeature = new FeatureBuilder({\n  script,\n  defaultOptions: {},\n  featureIdentifier: 'org.myorg/webshell.async-flattery',\n  className: 'AsyncFlatteryFeature'\n})\n  .withAsyncWebHandler('flatters')\n  .build();\n")),Object(i.b)("h3",{id:"web-implementation-2"},"Web Implementation"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:'title="AsyncFlatteryFeature.webjs"',title:'"AsyncFlatteryFeature.webjs"'}),"function AsyncFlatteryFeature(context) {\n  context.onAsyncShellMessage('flatters', function (message) {\n    return Promise.resolve('I love you too!')\n  });\n}\n")),Object(i.b)("h2",{id:"feature-cardinality"},"Feature Cardinality"),Object(i.b)("p",null,"Specify the cardinality of a feature (how many instances can co-exist). We\nare planning to get inspiration from ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://v2.docusaurus.io/docs/using-plugins#multi-instance-plugins-and-plugin-ids"}),"multi-instance plugins in\ndocusaurus"),"."),Object(i.b)("h2",{id:"passing-props-to-feature-scripts"},"Passing Props to Feature Scripts"),Object(i.b)("p",null,"Features are already customizable with options, which are once-and-for-all\ndelivered as an argument of the feature function. What we could provide is a way to\ndeclare JSON-serializable props that could be read in Feature Scripts."),Object(i.b)("h3",{id:"native-usage-3"},"Native Usage"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx",metastring:'title="MyAugmentedWebView"',title:'"MyAugmentedWebView"'}),"import React, { ComponentProps } from 'react';\nimport makeWebshell, { useAutoheight } from '@formidable-webview/webshell';\nimport WebView from 'react-native-webview';\nimport { FeatureWithProp } from './FeatureWithProp';\n\nconst Webshell = makeWebshell(WebView, new FeatureWithProp());\n\nexport default function MyAugmentedWebView(webshellProps: WebshellProps) {\n  return <Webshell userId={123654} {...webshellProps} />;\n}\n")),Object(i.b)("h3",{id:"native-implementation-3"},"Native Implementation"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:'title="FeatureWithProp.js"',title:'"FeatureWithProp.js"'}),"import featureWithPropScript from './feature-with-prop.webjs';\nimport { FeatureBuilder } from '@formidable-webview/webshell';\n\nexport const FeatureWithProp = new FeatureBuilder({\n  defaultOptions: {},\n  script: featureWithPropScript,\n  featureIdentifier: 'org.myorg/project.feature-with-prop',\n  className: 'FeatureWithProp'\n})\n  .withProp('userId')\n  .build();\n")),Object(i.b)("h3",{id:"web-implementation-3"},"Web Implementation"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:'title="feature-with-prop.webjs"',title:'"feature-with-prop.webjs"'}),"function featureWithProp(context) {\n  console.info(context.props.userId);\n  // 123654\n}\n")))}b.isMDXComponent=!0}}]);