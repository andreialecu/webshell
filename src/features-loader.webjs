// eslint-disable-next-line no-undef
var features = $$___FEATURES___$$;
var RNWV = window.ReactNativeWebView;
function extractNumericValueFromPixelString(pixelString) {
  return pixelString ? parseFloat(pixelString.match(/[\d.]+/)) : 0;
}
function makeCallbackSafe(onError, callback) {
  return function () {
    try {
      callback.apply(null, arguments);
    } catch (e) {
      onError(e);
    }
  };
}
function getDOMSelection(request, isCollection) {
  var normalRequest =
    typeof request === 'string' ? { query: request } : request;
  var selection;
  if (
    !isCollection &&
    (normalRequest.query === 'html' || normalRequest.tagName === 'html')
  ) {
    return document.documentElement;
  }
  if (
    !isCollection &&
    (normalRequest.query === 'body' || normalRequest.tagName === 'body')
  ) {
    return document.body;
  }
  if (normalRequest.query) {
    return isCollection
      ? document.querySelectorAll(normalRequest.query)
      : document.querySelector(normalRequest.query);
  }
  if (normalRequest.className) {
    selection = document.getElementsByClassName(normalRequest.className);
    return isCollection
      ? selection
      : (selection.length && selection[0]) || null;
  }
  if (normalRequest.id) {
    return document.getElementById(normalRequest.id) || null;
  }
  if (normalRequest.tagName) {
    selection = document.getElementsByTagName(normalRequest.tagName);
    if (isCollection) {
      return selection;
    }
    return (selection.length && selection[0]) || null;
  }
}
function registerFeature(specs) {
  if (specs && typeof specs === 'object') {
    var executable = specs.source;
    var snippetIdentifier = specs.identifier;
    var snippetOptions = specs.options || {};
  } else {
    return;
  }
  function sendErrorMessage(e) {
    context.error(e);
    RNWV.postMessage(
      JSON.stringify({
        type: 'error',
        identifier: snippetIdentifier,
        __isWebshellPostMessage: true,
        body:
          typeof e === 'string'
            ? e
            : typeof e === 'object' && typeof e.message === 'string'
            ? e.message
            : 'unknown error'
      })
    );
  }
  var context = {
    getDOMSelection: getDOMSelection,
    extractNumericValueFromPixelString: extractNumericValueFromPixelString,
    makeCallbackSafe: makeCallbackSafe.bind(null, sendErrorMessage),
    postMessage: function (message) {
      RNWV.postMessage(
        JSON.stringify({
          type: 'feature',
          identifier: snippetIdentifier,
          body: message,
          __isWebshellPostMessage: true
        })
      );
    },
    options: snippetOptions,
    warn: function (text) {
      var logger = console.warn || console.log;
      logger && logger.call(console, snippetIdentifier + ': ' + text);
    },
    error: function (text) {
      var logger = console.error || console.log;
      logger && logger.call(console, snippetIdentifier + ': ' + text);
    }
  };
  if (executable && typeof executable === 'function') {
    try {
      executable.call(null, context);
    } catch (e) {
      sendErrorMessage(e);
    }
  }
}

if (Array.isArray(features)) {
  Array.prototype.forEach.call(features, registerFeature);
}
