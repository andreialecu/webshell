function htmlDimensionsFeature(context) {
  var postMessage = context.postMessage;
  var options = context.options || {};
  var forceLegacy = options.forceLegacy || false;
  var oldDimensions = {
    layoutViewport: { width: 0, height: 0 },
    content: { width: 0, height: 0 }
  };
  function extractNumericValue(pixelString) {
    return pixelString ? parseFloat(pixelString.match(/[\d.]+/)) : 0;
  }
  function dimensionsAreEqual(d1, d2) {
    return (
      d1.layoutViewport.width === d2.layoutViewport.width &&
      d1.layoutViewport.height === d2.layoutViewport.height &&
      d1.content.width === d2.content.width &&
      d1.content.height === d2.content.height
    );
  }
  function getBodyMargins() {
    var bodyStyle = getComputedStyle(document.body);
    return {
      marginBottom: extractNumericValue(bodyStyle.marginBottom),
      marginTop: extractNumericValue(bodyStyle.marginTop),
      marginLeft: extractNumericValue(bodyStyle.marginLeft),
      marginRight: extractNumericValue(bodyStyle.marginRight)
    };
  }
  function postDimensionsObject(content, isLegacy) {
    var layoutViewport = {
      width: document.documentElement.clientWidth,
      height: document.documentElement.clientHeight
    };
    var dimensions = {
      isLegacy: isLegacy,
      layoutViewport: layoutViewport,
      content: content
    };
    if (!dimensionsAreEqual(oldDimensions, dimensions)) {
      postMessage(dimensions);
      oldDimensions = dimensions;
    }
  }
  function createPostResize(isLegacy) {
    return function postSize() {
      var spacing = getBodyMargins();
      var bodySize = document.body.getBoundingClientRect();
      postDimensionsObject(
        {
          width: bodySize.width + spacing.marginLeft + spacing.marginRight,
          height: bodySize.height + spacing.marginTop + spacing.marginBottom
        },
        isLegacy
      );
    };
  }
  // resize-observer mode
  if (window.ResizeObserver && !forceLegacy) {
    // Requires iOS Safari 13.5 or Android browser 81
    // https://caniuse.com/#feat=mdn-api_resizeobserver
    var postResize = createPostResize(false);
    var resizeObserver = new window.ResizeObserver(function (entries) {
      console.info(entries);
      postResize();
    });
    resizeObserver.observe(document.body);
  } else {
    var postSize = createPostResize(true);
    window.onresize = postSize;
    var MutationObserver =
      window['MutationObserver'] || window['WebKitMutationObserver'];
    // mutation-observer mode
    if (MutationObserver) {
      var observer = new MutationObserver(postSize);
      observer.observe(document, {
        subtree: true,
        attributes: true
      });
      // polling mode
    } else {
      var pollingInterval = 200;
      postSize();
      context.warn(
        "This browser doesn't support MutationObserver." +
          'The dimensions will still be read every' +
          pollingInterval +
          'ms and committed when a change is identified.'
      );
    }
    setInterval(postSize, 200);
  }
}
