/* eslint-disable no-inner-declarations */
function htmlDimensionsFeature(context) {
  var postMessage = context.postMessage;
  var options = context.options || {};
  var forceLegacy = options.forceLegacy || false;
  var oldDimensions = {
    layoutViewport: { width: 0, height: 0 },
    content: { width: 0, height: 0 },
    scrollable: { width: 0, height: 0 }
  };
  function dimensionsAreEqual(d1, d2) {
    return (
      d1.layoutViewport.width === d2.layoutViewport.width &&
      d1.layoutViewport.height === d2.layoutViewport.height &&
      d1.content.width === d2.content.width &&
      d1.content.height === d2.content.height &&
      d1.scrollable.width === d2.scrollable.width &&
      d1.scrollable.height === d2.scrollable.height
    );
  }
  function postDimensionsObject(scrollable, isLegacy) {
    var layoutViewport = {
      width: Math.round(document.documentElement.clientWidth),
      height: Math.round(document.documentElement.clientHeight)
    };
    var content = {
      width: Math.round(document.documentElement.offsetWidth),
      height: Math.round(document.documentElement.offsetHeight)
    };
    var dimensions = {
      isLegacy: isLegacy,
      layoutViewport: layoutViewport,
      scrollable: scrollable,
      content: content
    };
    if (!dimensionsAreEqual(oldDimensions, dimensions)) {
      postMessage(dimensions);
      oldDimensions = dimensions;
    }
  }
  if (window.ResizeObserver && !forceLegacy) {
    // Requires iOS Safari 13.5 or Android browser 81
    // https://caniuse.com/#feat=mdn-api_resizeobserver
    var resizeObserver = new window.ResizeObserver(function (entries) {
      for (var i = 0; i < entries.length; i++) {
        var entry = entries[i];
        if (entry.target.tagName.toLowerCase() === 'html') {
          postDimensionsObject(
            {
              width: entry.contentRect.width,
              height: entry.contentRect.height
            },
            false
          );
        }
      }
    });
    resizeObserver.observe(document.documentElement);
  } else {
    function postSize() {
      postDimensionsObject(
        {
          width: Math.round(document.documentElement.scrollWidth),
          height: Math.round(document.documentElement.scrollHeight)
        },
        true
      );
    }
    postSize();
    window.onresize = postSize;
    var MutationObserver =
      window['MutationObserver'] || window['WebKitMutationObserver'];
    if (MutationObserver) {
      var observer = new MutationObserver(postSize);
      observer.observe(document, {
        subtree: true,
        attributes: true
      });
    } else {
      context.warn(
        "This browser doesn't support MutationObserver." +
          'The dimensions will still be read every 100ms and committed when a change is identified.'
      );
    }
    setInterval(postSize, 100);
  }
}
