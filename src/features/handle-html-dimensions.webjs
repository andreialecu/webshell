function handleHTMLDimensionsFeature(context) {
  var postMessage = context.postMessage;
  var options = context.options || {};
  var forceImplementation = options.forceImplementation || false;
  var pollingInterval =
    typeof options.pollingInterval === 'number' ? options.pollingInterval : 200;
  var oldDimensions = {
    layoutViewport: { width: 0, height: 0 },
    content: { width: 0, height: 0 }
  };
  var MutationObserver =
    window['MutationObserver'] || window['WebKitMutationObserver'];
  function extractNumericValue(pixelString) {
    return pixelString ? parseFloat(pixelString.match(/[\d.]+/)) : 0;
  }
  function dimensionsAreEqual(d1, d2) {
    return (
      d1.layoutViewport.width === d2.layoutViewport.width &&
      d1.layoutViewport.height === d2.layoutViewport.height &&
      d1.content.width === d2.content.width &&
      d1.content.height === d2.content.height
    );
  }
  function getBodyMargins() {
    var bodyStyle = getComputedStyle(document.body);
    return {
      marginBottom: extractNumericValue(bodyStyle.marginBottom),
      marginTop: extractNumericValue(bodyStyle.marginTop),
      marginLeft: extractNumericValue(bodyStyle.marginLeft),
      marginRight: extractNumericValue(bodyStyle.marginRight)
    };
  }
  function postDimensionsObject(content, implementation) {
    var layoutViewport = {
      width: document.documentElement.clientWidth,
      height: document.documentElement.clientHeight
    };
    var dimensions = {
      implementation: implementation,
      layoutViewport: layoutViewport,
      content: content
    };
    if (!dimensionsAreEqual(oldDimensions, dimensions)) {
      postMessage(dimensions);
      oldDimensions = dimensions;
    }
  }
  function createPostDimensions(implementation) {
    return function postSize() {
      var spacing = getBodyMargins();
      var bodySize = document.body.getBoundingClientRect();
      postDimensionsObject(
        {
          width: bodySize.width + spacing.marginLeft + spacing.marginRight,
          height: bodySize.height + spacing.marginTop + spacing.marginBottom
        },
        implementation
      );
    };
  }
  if (
    window.ResizeObserver &&
    (forceImplementation === false || forceImplementation === 'resize')
  ) {
    // resize mode
    var resizePostDimensions = createPostDimensions('resize');
    var resizeObserver = new window.ResizeObserver(resizePostDimensions);
    resizeObserver.observe(document.body);
  } else if (
    MutationObserver &&
    (forceImplementation === false || forceImplementation === 'mutation')
  ) {
    // mutation mode
    var observerPostDimensions = createPostDimensions('mutation');
    window.onresize = observerPostDimensions;
    var observer = new MutationObserver(observerPostDimensions);
    observer.observe(document, {
      subtree: true,
      attributes: true
    });
  } else {
    // polling mode
    var pollingPostDimensions = createPostDimensions('polling');
    window.onresize = pollingPostDimensions;
    pollingPostDimensions();
    setInterval(pollingPostDimensions, 200);
    context.warn(
      "This browser doesn't support either MutationObserver or ResizeObserver." +
        'The dimensions will still be read every' +
        pollingInterval +
        'ms and committed when a change is observed.'
    );
  }
}
