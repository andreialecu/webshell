function elementCssBoxDimensionsFeature(context) {
  var postMessage = context.postMessage;
  var options = context.options || {};
  var tagName = options.tagName;
  var shouldThrowWhenNotFound = options.errorWhenNotFound === true;

  if (typeof tagName !== 'string') {
    throw new Error('Missing required tagName option');
  }
  function extractNumericValue(pixelString) {
    return pixelString ? parseFloat(pixelString.match(/[\d.]+/)) : 0;
  }
  function findElement() {
    var elements = document.getElementsByTagName(tagName);
    if (elements.length > 0) {
      return elements[0];
    }
    return null;
  }
  function postSize() {
    var element = findElement();
    if (element != null) {
      var scale = window.visualViewport
        ? window.visualViewport.scale
        : screen.availWidth && window.innerWidth
        ? screen.availWidth / window.innerWidth
        : 1;
      var scaleFactor = scale;
      var clientRect = element.getBoundingClientRect(),
        styles = getComputedStyle(element),
        paddingLeft =
          extractNumericValue(styles.getPropertyValue('padding-left')) *
          scaleFactor,
        paddingRight =
          extractNumericValue(styles.getPropertyValue('padding-right')) *
          scaleFactor,
        paddingTop =
          extractNumericValue(styles.getPropertyValue('padding-top')) *
          scaleFactor,
        paddingBottom =
          extractNumericValue(styles.getPropertyValue('padding-bottom')) *
          scaleFactor,
        borderLeftWidth =
          extractNumericValue(styles.getPropertyValue('border-left-width')) *
          scaleFactor,
        borderRightWidth =
          extractNumericValue(styles.getPropertyValue('border-right-width')) *
          scaleFactor,
        borderTopWidth =
          extractNumericValue(styles.getPropertyValue('border-top-width')) *
          scaleFactor,
        borderBottomWidth =
          extractNumericValue(styles.getPropertyValue('border-bottom-width')) *
          scaleFactor,
        marginLeft =
          extractNumericValue(styles.getPropertyValue('margin-left')) *
          scaleFactor,
        marginRight =
          extractNumericValue(styles.getPropertyValue('margin-right')) *
          scaleFactor,
        marginTop =
          extractNumericValue(styles.getPropertyValue('margin-top')) *
          scaleFactor,
        marginBottom =
          extractNumericValue(styles.getPropertyValue('margin-bottom')) *
          scaleFactor,
        borderBoxWidth = clientRect.width * scaleFactor,
        borderBoxHeight = clientRect.height * scaleFactor,
        horizontalScrollbarWidth =
          (element.offsetHeight - element.clientHeight) * scaleFactor,
        verticalScrollbarWidth =
          (element.offsetWidth - element.clientWidth) * scaleFactor,
        scrollBoxWidth = element.scrollWidth * scaleFactor,
        scrollBoxHeight = element.scrollHeight * scaleFactor;
      var dimensions = {
        scale: scaleFactor,
        scrollBox: {
          width: scrollBoxWidth,
          height: scrollBoxHeight
        },
        borderBox: {
          width: borderBoxWidth,
          height: borderBoxHeight
        },
        computedStyle: {
          paddingTop: paddingTop,
          paddingBottom: paddingBottom,
          paddingLeft: paddingLeft,
          paddingRight: paddingRight,
          borderTopWidth: borderTopWidth,
          borderBottomWidth: borderBottomWidth,
          borderLeftWidth: borderLeftWidth,
          borderRightWidth: borderRightWidth,
          marginTop: marginTop,
          marginBottom: marginBottom,
          marginLeft: marginLeft,
          marginRight: marginRight
        },
        horizontalScrollbarWidth: horizontalScrollbarWidth,
        verticalScrollbarWidth: verticalScrollbarWidth
      };
      postMessage(dimensions);
    } else if (shouldThrowWhenNotFound) {
      throw new Error("Couldn't find an element with tagName " + tagName);
    }
  }
  postSize();
  window.onresize = postSize;
  // trigger when DOM changes
  var MutationObserver =
    window['MutationObserver'] || window['WebKitMutationObserver'];
  if (MutationObserver) {
    var observer = new MutationObserver(postSize);
    observer.observe(document, {
      subtree: true,
      attributes: true
    });
  } else {
    // That is a last resort fallback for older browsers
    context.warn(
      "This browser doesn't support MutationObserver. Falling back to a timeout."
    );
    setTimeout(postSize, 1000);
  }
}
